module Contracts.BucketSale.Generated.BucketSale exposing
    ( Buy
    , Entered
    , Exited
    , bucketCount
    , bucketPeriod
    , bucketSupply
    , buckets
    , buyerReferralRewardPerc
    , buys
    , buysDecoder
    , calculateExitableTokens
    , currentBucket
    , enter
    , enteredDecoder
    , enteredEvent
    , exit
    , exitedDecoder
    , exitedEvent
    , referredTotal
    , referrerReferralRewardPerc
    , startOfSale
    , tokenOnSale
    , tokenSoldFor
    , totalExitedTokens
    , treasury
    )

import Abi.Decode as AbiDecode exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Abi.Encode as AbiEncode exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator

-}


{-| "bucketCount()" function
-}
bucketCount : Address -> Call BigInt
bucketCount contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "bucketCount()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "bucketPeriod()" function
-}
bucketPeriod : Address -> Call BigInt
bucketPeriod contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "bucketPeriod()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "bucketSupply()" function
-}
bucketSupply : Address -> Call BigInt
bucketSupply contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "bucketSupply()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "buckets(uint256)" function
-}
buckets : Address -> BigInt -> Call BigInt
buckets contractAddress a =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "buckets(uint256)" [ AbiEncode.uint a ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "buyerReferralRewardPerc()" function
-}
buyerReferralRewardPerc : Address -> Call BigInt
buyerReferralRewardPerc contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "buyerReferralRewardPerc()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "buys(uint256,address)" function
-}
type alias Buy =
    { valueEntered : BigInt
    , buyerTokensExited : BigInt
    }


buys : Address -> BigInt -> Address -> Call Buy
buys contractAddress a b =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "buys(uint256,address)" [ AbiEncode.uint a, AbiEncode.address b ]
    , nonce = Nothing
    , decoder = buysDecoder
    }


buysDecoder : Decoder Buy
buysDecoder =
    abiDecode Buy
        |> andMap AbiDecode.uint
        |> andMap AbiDecode.uint
        |> toElmDecoder


{-| "calculateExitableTokens(uint256,address)" function
-}
calculateExitableTokens : Address -> BigInt -> Address -> Call BigInt
calculateExitableTokens contractAddress bucketId buyer =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "calculateExitableTokens(uint256,address)" [ AbiEncode.uint bucketId, AbiEncode.address buyer ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "currentBucket()" function
-}
currentBucket : Address -> Call BigInt
currentBucket contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "currentBucket()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "enter(address,uint256,uint256,address)" function
-}
enter : Address -> Address -> BigInt -> BigInt -> Address -> Call ()
enter contractAddress buyer bucketId amount referrer =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "enter(address,uint256,uint256,address)" [ AbiEncode.address buyer, AbiEncode.uint bucketId, AbiEncode.uint amount, AbiEncode.address referrer ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "exit(uint256,address)" function
-}
exit : Address -> BigInt -> Address -> Call ()
exit contractAddress bucketId buyer =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "exit(uint256,address)" [ AbiEncode.uint bucketId, AbiEncode.address buyer ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


{-| "referredTotal(address)" function
-}
referredTotal : Address -> Address -> Call BigInt
referredTotal contractAddress a =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "referredTotal(address)" [ AbiEncode.address a ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "referrerReferralRewardPerc(address)" function
-}
referrerReferralRewardPerc : Address -> Address -> Call BigInt
referrerReferralRewardPerc contractAddress referrerAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "referrerReferralRewardPerc(address)" [ AbiEncode.address referrerAddress ]
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "startOfSale()" function
-}
startOfSale : Address -> Call BigInt
startOfSale contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "startOfSale()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "tokenOnSale()" function
-}
tokenOnSale : Address -> Call Address
tokenOnSale contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "tokenOnSale()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "tokenSoldFor()" function
-}
tokenSoldFor : Address -> Call Address
tokenSoldFor contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "tokenSoldFor()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "totalExitedTokens()" function
-}
totalExitedTokens : Address -> Call BigInt
totalExitedTokens contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "totalExitedTokens()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.uint
    }


{-| "treasury()" function
-}
treasury : Address -> Call Address
treasury contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| AbiEncode.functionCall "treasury()" []
    , nonce = Nothing
    , decoder = toElmDecoder AbiDecode.address
    }


{-| "Entered(address,uint256,address,uint256,uint256,address,uint256)" event
-}
type alias Entered =
    { sender : Address
    , bucketId : BigInt
    , buyer : Address
    , valueEntered : BigInt
    , buyerReferralReward : BigInt
    , referrer : Address
    , referrerReferralReward : BigInt
    }


enteredEvent : Address -> Maybe Address -> Maybe Address -> LogFilter
enteredEvent contractAddress buyer referrer =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.keccak256 "Entered(address,uint256,address,uint256,uint256,address,uint256)"
        , Maybe.map (abiEncode << AbiEncode.address) buyer
        , Maybe.map (abiEncode << AbiEncode.address) referrer
        ]
    }


enteredDecoder : Decoder Entered
enteredDecoder =
    succeed Entered
        |> custom (data 0 AbiDecode.address)
        |> custom (data 1 AbiDecode.uint)
        |> custom (topic 1 AbiDecode.address)
        |> custom (data 2 AbiDecode.uint)
        |> custom (data 3 AbiDecode.uint)
        |> custom (topic 2 AbiDecode.address)
        |> custom (data 4 AbiDecode.uint)


{-| "Exited(uint256,address,uint256)" event
-}
type alias Exited =
    { bucketId : BigInt
    , buyer : Address
    , tokensExited : BigInt
    }


exitedEvent : Address -> Maybe Address -> LogFilter
exitedEvent contractAddress buyer =
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics =
        [ Just <| U.keccak256 "Exited(uint256,address,uint256)"
        , Maybe.map (abiEncode << AbiEncode.address) buyer
        ]
    }


exitedDecoder : Decoder Exited
exitedDecoder =
    succeed Exited
        |> custom (data 0 AbiDecode.uint)
        |> custom (topic 1 AbiDecode.address)
        |> custom (data 1 AbiDecode.uint)
